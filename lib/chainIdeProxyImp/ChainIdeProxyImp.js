!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ChainIdeProxyImp=e():n.ChainIdeProxyImp=e()}(window,function(){return function(n){var e={};function t(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return n[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(i,r,function(e){return n[e]}.bind(null,r));return i},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";var i,r;t.r(e),function(n){n.plugin="plugin",n.ide="ide"}(i||(i={})),function(n){n.subscribeEvent="subscribeEvent",n.publishEvent="publishEvent",n.unsubscribeEvent="unsubscribeEvent",n.registerApiFunction="registerApiFunction",n.registerApiFunctionReturn="registerApiFunctionReturn",n.callApiFunction="callApiFunction"}(r||(r={}));var u=function(){return(u=Object.assign||function(n){for(var e,t=1,i=arguments.length;t<i;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}).apply(this,arguments)},o=function(n){var e=u({source:i.plugin,success:!0,top:window.top===window},n);window.top.postMessage(e,"*")};var c=function(){function n(n){this.pluginOptions=n,this.events=[],this.registerApiFunctions=[],window.addEventListener("message",function(n){var e=n.data,t=this.pluginOptions.pluginId;if(e.source===i.ide)try{switch(e.actionType){case r.subscribeEvent:if(e.pluginId!==t)return;(u=this.getSubscribeCallbackByEventname(e.eventName))&&u(e);break;case r.registerApiFunctionReturn:if(e.targetPluginId!==t)return;var u;if((u=this.getRegisterApiFunctionByEventname(e.functionName))&&"function"===u.then||u.toString().includes("Promise")){u(e.data).then(function(n){o({actionType:r.registerApiFunctionReturn,currentPluginId:e.currentPluginId,targetPluginId:e.targetPluginId,functionName:e.functionName,data:n})}).catch(function(n){throw n});break}o({actionType:r.registerApiFunctionReturn,currentPluginId:e.currentPluginId,targetPluginId:e.targetPluginId,functionName:e.functionName,data:u&&u(e.data)});break;case r.callApiFunction:}}catch(n){console.error(n),o({pluginId:e.pluginId,eventName:e.eventName,functionName:e.functionName,success:!1,error:n})}}.bind(this),!1)}return n.prototype.getSubscribeCallbackByEventname=function(n){var e=this.events.filter(function(e){return e.eventName===n});return e.length>0&&e[0].callback},n.prototype.getRegisterApiFunctionByEventname=function(n){var e=this.registerApiFunctions.filter(function(e){return e.functionName===n});return e.length>0&&e[0].callback},n.prototype.subscribeEvent=function(n,e){var t=this.pluginOptions.pluginId;o({actionType:r.subscribeEvent,pluginId:t,eventName:n}),this.events.push({eventName:n,callback:e})},n.prototype.publishEvent=function(n,e){o({actionType:r.publishEvent,eventName:n,data:e})},n.prototype.unsubscribeEvent=function(n){var e=this,t=this.pluginOptions.pluginId;o({actionType:r.unsubscribeEvent,pluginId:t,eventName:n}),this.events.forEach(function(t,i){t.eventName===n&&(window.removeEventListener("message",t.callback.bind(e),!1),e.events.splice(i,1))})},n.prototype.registerApiFunction=function(n,e){var t=this.pluginOptions.pluginId;o({actionType:r.registerApiFunction,pluginId:t,functionName:n}),this.registerApiFunctions.push({functionName:n,callback:e})},n.prototype.callApiFunction=function(n,e,t){var u=this.pluginOptions.pluginId;return o({actionType:r.callApiFunction,currentPluginId:u,targetPluginId:n,functionName:e,data:t}),new Promise(function(n,t){window.addEventListener("message",function o(c){c.data.source===i.ide&&c.data.actionType===r.callApiFunction&&c.data.functionName===e&&c.data.pluginId===u&&(window.removeEventListener("message",o),c.data.success?n(c.data):t(c.data.error))},!1)})},n}();e.default=c}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,