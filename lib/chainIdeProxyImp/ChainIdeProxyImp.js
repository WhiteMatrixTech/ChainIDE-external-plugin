!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ChainIdeProxyImp=t():e.ChainIdeProxyImp=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var i,r;n.r(t),function(e){e.plugin="plugin",e.ide="ide"}(i||(i={})),function(e){e.subscribeEvent="subscribeEvent",e.publishEvent="publishEvent",e.unsubscribeEvent="unsubscribeEvent",e.registerApiFunction="registerApiFunction",e.registerApiFunctionReturn="registerApiFunctionReturn",e.callApiFunction="callApiFunction"}(r||(r={}));var o=function(){return(o=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},u=function(e){var t=o({source:i.plugin,success:!0,top:window.top===window},e);window.top.postMessage(t,"*")};var a=function(){return(a=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},c=function(){function e(e){this.pluginOptions=e,this.events=[],this.registerApiFunctions=[],window.addEventListener("message",function(e){var t=e.data,n=this.pluginOptions.pluginId;if(t.source===i.ide)try{switch(t.actionType){case r.subscribeEvent:if(t.pluginId!==n)return;(o=this.getSubscribeCallbackByEventname(t.eventName))&&o(t);break;case r.registerApiFunctionReturn:if(t.targetPluginId!==n)return;var o,a=(o=this.getRegisterApiFunctionByEventname(t.functionName))(t.data);if(a&&a.then){a.then(function(e){u({actionType:r.registerApiFunctionReturn,currentPluginId:t.currentPluginId,targetPluginId:t.targetPluginId,functionName:t.functionName,data:e})}).catch(function(e){throw e});break}u({actionType:r.registerApiFunctionReturn,currentPluginId:t.currentPluginId,targetPluginId:t.targetPluginId,functionName:t.functionName,data:a});break;case r.callApiFunction:}}catch(e){console.error(e),u({pluginId:t.pluginId,eventName:t.eventName,functionName:t.functionName,success:!1,error:e})}}.bind(this),!1)}return e.prototype.getSubscribeCallbackByEventname=function(e){var t=this.events.filter(function(t){return t.eventName===e});return t.length>0&&t[0].callback},e.prototype.getRegisterApiFunctionByEventname=function(e){var t=this.registerApiFunctions.filter(function(t){return t.functionName===e});return t.length>0&&t[0].callback},e.prototype.subscribeEvent=function(e,t){var n=this.pluginOptions.pluginId;u({actionType:r.subscribeEvent,pluginId:n,eventName:e}),this.events.push({eventName:e,callback:t})},e.prototype.publishEvent=function(e,t){u({actionType:r.publishEvent,eventName:e,data:t})},e.prototype.unsubscribeEvent=function(e){var t=this,n=this.pluginOptions.pluginId;u({actionType:r.unsubscribeEvent,pluginId:n,eventName:e}),this.events.forEach(function(n,i){n.eventName===e&&(window.removeEventListener("message",n.callback.bind(t),!1),t.events.splice(i,1))})},e.prototype.registerApiFunction=function(e,t){var n=this.pluginOptions.pluginId;u({actionType:r.registerApiFunction,pluginId:n,functionName:e}),this.registerApiFunctions.push({functionName:e,callback:t})},e.prototype.fileSystemService=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=this.pluginOptions.pluginId;return u({actionType:r.callApiFunction,currentPluginId:o,targetPluginId:"root",functionName:"fileSystem",data:{apiName:e,rest:t}}),new Promise(function(t,n){window.addEventListener("message",function u(c){c.data.source===i.ide&&c.data.actionType===r.callApiFunction&&"fileSystem"===c.data.functionName&&c.data.pluginId===o&&c.data.data.apiName===e&&(window.removeEventListener("message",u),c.data.success?t(a(a({},c.data),{data:c.data.data.res})):n(c.data.error))},!1)})},e.prototype.callApiFunction=function(e,t,n){var o=this.pluginOptions.pluginId;return u({actionType:r.callApiFunction,currentPluginId:o,targetPluginId:e,functionName:t,data:n}),new Promise(function(e,n){window.addEventListener("message",function u(a){a.data.source===i.ide&&a.data.actionType===r.callApiFunction&&a.data.functionName===t&&a.data.pluginId===o&&(window.removeEventListener("message",u),a.data.success?e(a.data):n(a.data.error))},!1)})},e}();t.default=c}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,